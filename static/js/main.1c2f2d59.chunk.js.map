{"version":3,"sources":["states/todo/valueObject.ts","states/todo/entity.ts","TodoList.tsx","hooks/todo.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["stateTodoTitle","atomFamily","key","default","stateTodoDescription","stateTodoIsDone","stateTodoIds","atom","stateTodo","selectorFamily","get","todoId","id","title","description","isDone","set","newValue","reset","DefaultValue","find","prev","stateTodos","selector","map","apiResponse","TodoList","todos","useRecoilValue","setFromArray","useRecoilCallback","todoArray","forEach","todo","upsertTodo","newTodo","removeTodo","filter","useEffect","handleCreateDummyTodo","useCallback","newTodoId","length","toggleTodoStatus","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c2f2d59.chunk.js","sourcesContent":["import { atomFamily } from \"recoil\";\nimport {\n  TodoDescription,\n  TodoId,\n  TodoIsDone,\n  TodoTitle,\n} from \"../../types/todo\";\nexport const stateTodoTitle = atomFamily<TodoTitle, TodoId>({\n  key: \"state-todo-title\",\n  default: \"\",\n});\n\nexport const stateTodoDescription = atomFamily<TodoDescription, TodoId>({\n  key: \"state-todo-description\",\n  default: \"\",\n});\n\nexport const stateTodoIsDone = atomFamily<TodoIsDone, TodoId>({\n  key: \"state-todo-is-done\",\n  default: false,\n});\n","import { atom, DefaultValue, selector, selectorFamily } from \"recoil\";\nimport { Todo, TodoId } from \"../../types/todo\";\nimport {\n  stateTodoDescription,\n  stateTodoIsDone,\n  stateTodoTitle,\n} from \"./valueObject\";\n\nexport const stateTodoIds = atom<TodoId[]>({\n  key: \"state-todo-ids\",\n  default: [],\n});\n\nexport const stateTodo = selectorFamily<Todo, TodoId>({\n  key: \"state-todo\",\n  get: (todoId) => ({ get }) => {\n    return {\n      id: todoId,\n      title: get(stateTodoTitle(todoId)),\n      description: get(stateTodoDescription(todoId)),\n      isDone: get(stateTodoIsDone(todoId)),\n    };\n  },\n\n  set: (todoId) => ({ get, set, reset }, newValue) => {\n    if (newValue instanceof DefaultValue) {\n      // NOTE: DefaultValue型のときはresetから呼ばれたとき\n      reset(stateTodoTitle(todoId));\n      reset(stateTodoDescription(todoId));\n      reset(stateTodoIsDone(todoId));\n      return;\n    }\n\n    set(stateTodoTitle(todoId), newValue.title);\n    newValue.description &&\n      set(stateTodoDescription(todoId), newValue.description);\n    set(stateTodoIsDone(todoId), newValue.isDone);\n\n    if (get(stateTodoIds).find((todoId) => todoId === newValue.id)) return; // NOTE: 更新のときはskip\n    set(stateTodoIds, (prev) => [...prev, newValue.id]); // NOTE: 全件取得・全リセット用にIDの配列を保持しておくと便利\n  },\n});\n\nexport const stateTodos = selector<Todo[]>({\n  key: \"state-todos\",\n  get: ({ get }) => {\n    const todoIds = get(stateTodoIds);\n    return todoIds.map((todoId) => get(stateTodo(todoId)));\n  },\n});\n","import { useCallback, useEffect } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { useTodo } from \"./hooks/todo\";\nimport { stateTodos } from \"./states/todo/entity\";\nimport { Todo } from \"./types/todo\";\n\nconst apiResponse = {\n  todos: [\n    { id: 1, title: \"hoge\", description: \"hogehogehoge\", isDone: false },\n    { id: 2, title: \"fuga\", description: \"fugafugafuga\", isDone: true },\n    { id: 3, title: \"fizz\", isDone: false },\n    { id: 4, title: \"buzz\", description: \"buzzbuzzbuzz\", isDone: false },\n  ],\n};\n\nexport const TodoList = () => {\n  const todos = useRecoilValue(stateTodos);\n  const { setFromArray, upsertTodo, removeTodo } = useTodo();\n\n  useEffect(() => {\n    setFromArray(apiResponse.todos);\n  }, []);\n\n  const handleCreateDummyTodo = useCallback(() => {\n    // NOTE: APIリクエストを送る Idの自動生成など\n    // ここでは最後のidの+1\n    const newTodoId = todos[todos.length - 1].id + 1;\n\n    upsertTodo({\n      id: newTodoId,\n      title: \"dummy\",\n      description: \"it's dummy todo.\",\n      isDone: false,\n    });\n  }, [todos, upsertTodo]);\n\n  const toggleTodoStatus = useCallback(\n    (todo: Todo) => {\n      upsertTodo({\n        ...todo,\n        isDone: !todo.isDone,\n      });\n    },\n    [upsertTodo]\n  );\n\n  return (\n    <div>\n      <h1>Recoil Todo List Sample</h1>\n      <button onClick={handleCreateDummyTodo}>Add Dummy Todo</button>\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            <div>\n              <p>\n                タイトル: {todo.title} {todo.isDone && \"(Done)\"}\n              </p>\n              {todo.description && <p>詳細: {todo.description}</p>}\n            </div>\n            <button onClick={() => removeTodo(todo.id)}>remove</button>\n            <button onClick={() => toggleTodoStatus(todo)}>\n              toggle status\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { useRecoilCallback } from \"recoil\";\nimport { stateTodo, stateTodoIds } from \"../states/todo/entity\";\nimport { Todo, TodoId } from \"../types/todo\";\n\nexport const useTodo = () => {\n  // NOTE: サーバからデータを取得してstateに反映するときなど\n  const setFromArray = useRecoilCallback(({ set }) => (todoArray: Todo[]) => {\n    todoArray.forEach((todo) => {\n      set(stateTodo(todo.id), todo);\n    });\n  });\n\n  const upsertTodo = useRecoilCallback(({ set }) => (newTodo: Todo) => {\n    set(stateTodo(newTodo.id), newTodo);\n  });\n\n  const removeTodo = useRecoilCallback(({ set, reset }) => (todoId: TodoId) => {\n    reset(stateTodo(todoId));\n    set(stateTodoIds, (prev) => prev.filter((id) => id !== todoId));\n  });\n\n  return {\n    setFromArray,\n    upsertTodo,\n    removeTodo,\n  };\n};\n","import { RecoilRoot } from \"recoil\";\nimport { TodoList } from \"./TodoList\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <TodoList />\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}